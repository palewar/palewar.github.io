<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Theory | Swift Wala]]></title>
  <link href="http://swiftwala.com/blog/categories/theory/atom.xml" rel="self"/>
  <link href="http://swiftwala.com/"/>
  <updated>2014-11-22T00:14:55+05:30</updated>
  <id>http://swiftwala.com/</id>
  <author>
    <name><![CDATA[Sachin Palewar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functions = Closures]]></title>
    <link href="http://swiftwala.com/functions-equals-closures"/>
    <updated>2014-11-11T12:04:48+05:30</updated>
    <id>http://swiftwala.com/functions-equals-closures</id>
    <content type="html"><![CDATA[<p>Unlike my other posts <a href="http://swiftwala.com/blog/categories/equals/">equating</a> 2 concepts, I am actually completely right this time. As Functions in Swift are actually just <strong>Closures with a name</strong>. So what is a Closure? It&rsquo;s like a function, but without a name :-)</p>

<p>Here is a simple Function:<!-- more --></p>

<pre><code class="swift">func isFirstStringGreater(s1: String, s2: String) -&gt; Bool {
    return s1 &gt; s2
}
</code></pre>

<p>Which can be written as Closure like this:</p>

<pre><code class="swift">{ (s1: String, s2: String) -&gt; Bool in
    return s1 &gt; s2
}
</code></pre>

<p>So basically we write Closure inside the curly braces, omit the <code>func</code> keyword and a name and instead of wrapping body within braces, we mark the beginning of body by  <code>in</code> keyword.</p>

<p>Above closure can be further shortened to <code>{ s1, s2 in s1 &gt; s2 }</code> and even to just <code>&gt;</code> if closure is being passed as an argument to a function. How all these shortening works has been explained really well in <a href="https://developer.apple.com/library/mac/documentation/swift/conceptual/swift_programming_language/Closures.html">Apple Docs</a>. You will find details about concepts like <strong>&lsquo;Trailing Closure&rsquo;</strong> and <strong>&lsquo;Capturing&rsquo;</strong> explained in the documentation as well.</p>

<p>Now let&rsquo;s talk about Functions. We have already seen what a function looks like in Swift above, however if you have used Objective C, you may miss the named parameters while calling a function. Well don&rsquo;t worry functions in swift are quite flexible and powerful. Here are some points to remember regarding function parameters in Swift:</p>

<ul>
<li>We can prefix <code>#</code> to Parameter names to get expressive parameter names like Objective-C.</li>
<li>For parameters with default values Swift automatically uses their names as external names without prefixing <code>#</code>.</li>
<li>Parameter are constant by default, to make them variable prefix parameter name with <code>var</code>.</li>
</ul>


<p>Again Apple has explained Functions quite well in it&rsquo;s <a href="https://developer.apple.com/library/mac/documentation/swift/conceptual/swift_programming_language/Functions.html">documentation</a> so do check it out for detailed understanding. You may like to pay special attention to understand <strong>In-out</strong> and <strong>Variadic</strong> parameters.</p>

<p>Something which is really different and powerful regarding Swift Functions is that you can treat them as regular objects or types. You can assign them to vars and constants, pass them as parameters to other functions and even return a function from a function. Swift has taken these ideas from <strong>&lsquo;Functional Programming&rsquo;</strong> languages. Although <a href="http://robnapier.net/swift-is-not-functional">Swift is not completely functional</a>, it lets you use several Functional Programming concepts. To better understand Functional Programming with Swift you can check out this <a href="http://www.raywenderlich.com/82599/swift-functional-programming-tutorial">Ray Wenderlich Tutorial</a> and consider buying <a href="http://www.objc.io/books/">this book</a>.</p>

<p>If you like my posts, please <a href="https://twitter.com/swiftwala">follow</a> me. You can also <a href="https://feedburner.google.com/fb/a/mailverify?uri=SwiftWala&amp;amp;loc=en_US">subscribe via email</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UISplitViewController=UINavigationController]]></title>
    <link href="http://swiftwala.com/uisplitviewcontroller-equals-uinavigationcontroller"/>
    <updated>2014-11-04T12:02:40+05:30</updated>
    <id>http://swiftwala.com/uisplitviewcontroller-equals-uinavigationcontroller</id>
    <content type="html"><![CDATA[<p>You read it right. If you are using iOS8, UISplitViewController indeed behaves as if it&rsquo;s a UINavigationController on iPhone. Obviously it means that <strong>UISplitViewController is now supported for iPhones as well</strong>. This is a small but important part of the bigger picture of Universal Storyboards and Adaptive UI starting from iOS8. <!-- more --> Now it&rsquo;s possible for us to have a single <strong>Universal Storyboard which supports all types of iPhones and iPads</strong>.</p>

<p>You will also notice that in XCode6 there is now a new Master-Detail Application template. If you select a Universal Project option with it, you get a Storyboard with UISplitViewController and you can run it against both iPhone as well as iPad simulators. You use <strong>new Adaptive segues, &lsquo;Show&rsquo; for Master View and &lsquo;Show Detail&rsquo; for Detail View instead of &lsquo;Push&rsquo;</strong> which is now deprecated. &lsquo;Show&rsquo; is similar to &lsquo;Push&rsquo;. When running on iPad &lsquo;Show Detail&rsquo; ensures that Detail View is displayed on right side of Split, but when running on an iPhone &lsquo;Show Detail&rsquo; automatically starts behaving as &lsquo;Show&rsquo; and Detail View is displayed as the single view on top. Very creative approach isn&rsquo;t it?</p>

<p>For the sake of simplicity I have generalized a bit. Once you understand the concepts though, you need to know that above behavior is not really fixed and you can have a split view on an iPhone if you want. Not to forget iPhone 6+ by default supports Split View in landscape mode. To support Split View on smaller iPhone you can modify <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITraitSet_ClassReference/index.html">Trait Collection</a>. Also at times you may want to not display detail view on iPhones and instead directly show master view. If detail is empty, it doesn&rsquo;t make sense to display a blank view as the only view at the top. You can control which view appears as the top view on iPhone when using Universal Storyboard using new methods in <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISplitViewControllerDelegate_protocol/index.html">Delegate</a></p>

<p>For a really simple introduction to new UISplitViewController you may read this <a href="http://nshipster.com/uisplitviewcontroller/">post by Natasha Murashev</a> and then come back and check out my <a href="http://swiftwala.com/multiple-detail-views">Multiple Detail Views Sample</a> to see the Split View in action. I also suggest you to check out <a href="http://www.jessesquires.com/adaptive-user-interfaces/">Adaptive UI by Jesse Squires</a> where he explains &lsquo;Size-Classes&rsquo; in a very simple manner and suggests the way forward for iOS Developers and designers.</p>

<p>Let&rsquo;s be Adaptive :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enum=Struct=Class]]></title>
    <link href="http://swiftwala.com/enum-equals-struct-equals-class"/>
    <updated>2014-10-10T16:07:43+05:30</updated>
    <id>http://swiftwala.com/enum-equals-struct-equals-class</id>
    <content type="html"><![CDATA[<p>I have used enums, structs and classes in other languages before, but never thought that I will ever be comparing them,<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> as they always seemed to be completely different programming concepts in other languages. Well Swift is different, it has supercharged enums and structs so much so that it may seem overwhelming and outright confusing.</p>

<p>Ok, brace yourself. Here it comes - <strong>Both enums and structs can have properties and methods like classes.</strong> <!-- more -->What?? That was exactly my reaction. This new concept was so alien to me that my head started spinning and I gave up on reading and understanding these concepts in detail in the <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_135">Swift Book</a>. So a few days passed and I was just checking out how many <a href="https://github.com/trending?l=swift&amp;since=monthly">Swift Repos</a> are there on Github, and I came across <a href="https://github.com/dankogai/swift-json">swift-json</a> by <a href="http://en.wikipedia.org/wiki/Dan_Kogai">Dan Kogai</a>. While <a href="https://github.com/dankogai/swift-json/wiki/Discussion">explaining</a> his approach, Dan drops some pearls of wisdom:</p>

<blockquote><p>Some thing must be copied by value and that&rsquo;s what struct is for. In swifts primitives are struct that happens to fit in the register. So is enum, which is really a union in disguise. And as with C and friends enums are also copied by value.</p></blockquote>

<p>I read and re-read these 2 lines again and again so that I can really make complete sense of these lines. So the key takeaway from this post should be that <strong>enums and structs are value types, whereas classes are reference types</strong>. This key difference gives us the reason to use Structs and Classes in different scenarios.</p>

<p>Others have already done a good job with explaining these different scenarios, so instead of writing a lengthy post myself, I would just point you to an <a href="http://www.objc.io/issue-16/swift-classes-vs-structs.html">excellent blog post</a> on this same topic. Go through that post and you will feel becoming a little more wiser than before. Also last but not the least, <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_135">Swift Book</a> actually explains these concepts quite clearly and in detail, so you should definitely read it to gain an indepth understanding of these concepts.</p>

<p>My intention was just to really smoothen-up the road ahead :-)</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I am sorry for a misleading title for this post, but couldn&rsquo;t think of anything better. This post is about similarities and differences between Enumeration, Structure and Class and yes before you point out, I know that I should have used &lsquo;==&rsquo; instead of &lsquo;=&rsquo;, but hey title doesn&rsquo;t have to be syntactically correct, right?<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
