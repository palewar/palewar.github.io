<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Swift Wala]]></title>
  <link href="http://swiftwala.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://swiftwala.com/"/>
  <updated>2014-11-25T14:44:21+05:30</updated>
  <id>http://swiftwala.com/</id>
  <author>
    <name><![CDATA[Sachin Palewar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CocoaPods Is Ready for Swift]]></title>
    <link href="http://swiftwala.com/cocoapods-is-ready-for-swift"/>
    <updated>2014-11-21T18:38:10+05:30</updated>
    <id>http://swiftwala.com/cocoapods-is-ready-for-swift</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/CocoaPods.png" width="100" height="100"> When we work on a real project, we use many third-party libraries to make our lives easier. To use these libs, we first need to find them, download them and include them in our project. <a href="http://cocoapods.org/">CocoaPods</a> lets us automate all this process and also handles dependency management for us. Check out this <a href="http://nshipster.com/cocoapods/">post on NSHipster</a> for a very good intro. <!-- more --></p>

<p>Using Cocoapods is really easy. You need to first install it by running <code>$ sudo gem install cocoapods</code> in Terminal. Then you need to create a Podfile in your project directory. A Podfile for including very popular <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> lib will look like this:</p>

<pre><code class="ruby">source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '7.0'
pod 'AFNetworking', '~&gt; 2.4'
</code></pre>

<p>And you are all set to use CocoaPods. You run <code>$ pod install</code> and you get an Xcode workspace file <code>.xcworkspace</code> created alongside your project file. From now on you need to always open and build project using workspace file instead of project file and you will be fine.</p>

<p>When Swift became available, iOS programmers wanted to use their much beloved CocoaPods to integrated with already existing ObjectiveC libraries and that was not really difficult, above steps work with Swift projects as well, you just need <a href="https://medium.com/@kirualex/cocoapods-with-swift-e6f8ba8f0afc">a couple more steps</a> and you are done.</p>

<p>However soon some new and shiny libraries written in Swift came on the scene. My favorites being <a href="http://nshipster.com/alamofire/">Alamofire</a> and <a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a>, but CocoaPods was not yet ready for Swift libs and people had to rely on using <a href="http://git-scm.com/book/en/Git-Tools-Submodules">alternative methods</a> to use these libs. However <a href="https://github.com/CocoaPods/CocoaPods/milestones/0.36.0">CocoaPods 0.36</a> is just around the corner and it will include support for Swift Pods.</p>

<p>While a public release is still some time away, you can use CocoaPods unreleased code to start integrating Swift libs in your projects right now. Just be cautious, that this is not fully tested code and treat it as a stopgap measure till 0.36 comes out. Ok so let&rsquo;s see what needs to be done:</p>

<ul>
<li>Create a file, called &lsquo;Gemfile&rsquo; in your project directory and just paste these lines in the file and save:</li>
</ul>


<pre><code class="ruby">source 'https://rubygems.org'

gem 'cocoapods', :git =&gt; 'https://github.com/CocoaPods/CocoaPods.git', :branch =&gt; 'swift'
gem 'cocoapods-core', :git =&gt; 'https://github.com/CocoaPods/Core.git'
gem 'xcodeproj',  :git =&gt; 'https://github.com/CocoaPods/Xcodeproj.git'
gem 'claide', :git =&gt; 'https://github.com/CocoaPods/CLAide.git'
</code></pre>

<ul>
<li>Run command <code>bundle install</code></li>
<li>Create a Podfile. If you want to use Alamofire and SwiftyJSON in your project, your Podfile<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> should look like this:</li>
</ul>


<pre><code class="ruby">source 'https://github.com/CocoaPods/Specs.git'

platform :ios, '8.0'
pod 'SwiftyJSON', :git =&gt; "https://github.com/orta/SwiftyJSON", :branch =&gt; "podspec"
pod 'Alamofire', :git =&gt; "https://github.com/mrackwitz/Alamofire.git", :branch =&gt; "podspec"
</code></pre>

<ul>
<li>Run <code>bundle exec pod install</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> and you are done. You get the workspace file which you need to use from now on.</li>
</ul>


<p>Now you should be able to import Alamofire and SwiftyJSON in your project and use<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> them.</p>

<p>Hope you liked this post. Connect via <a href="https://twitter.com/swiftwala">Twitter</a> &amp; <a href="https://feedburner.google.com/fb/a/mailverify?uri=SwiftWala&amp;amp;loc=en_US">email</a> for future updates. Thanks for reading.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Each lib should have a <a href="http://guides.cocoapods.org/making/specs-and-specs-repo.html">podspec</a> file to work with CocoaPods, since that&rsquo;s not the case right now, we are using forks of libs which contain a podspec file. This also means that if you want to use any other Swift lib with CocoaPods, you will need to fork it and create a podspec file for it yourself and then you will need to use path of your fork in the podfile.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>&lsquo;bundle exec&rsquo; ensures that you are using Swift CocoaPods version from your Gemfile. Thanks <a href="https://twitter.com/modocache">Brian</a> of <a href="https://github.com/Quick/Quick#how-to-install-quick-using-beta-cocoapods">Quick</a> for the tip.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Thanks <a href="https://www.facebook.com/ambaschobsanti">Ambas</a> for the tip about CLAide.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Detail Views in iOS8]]></title>
    <link href="http://swiftwala.com/multiple-detail-views"/>
    <updated>2014-10-21T17:17:28+05:30</updated>
    <id>http://swiftwala.com/multiple-detail-views</id>
    <content type="html"><![CDATA[<p>A few days back I was trying to create a simple iOS app to compete in one of the contest at <a href="http://www.topcoder.com/?action=callback&amp;utm_source=palewar&amp;utm_campaign=ReferralProgram">Topcoder</a>. I needed a Table View to show initial menu, then one of the menus had submenus so needed second Table View to show that. I needed a couple of Detail Views which should open when clicked on any of the menu items. <!-- more --> I hadn&rsquo;t programed for a few years now, so I was not familiar with Storyboards as Nibs were the norm a few years back. I was also learning Swift, so I couldn&rsquo;t really finish the app before the deadline.</p>

<p>However while trying to work on the app, I often googled for samples with different combinations of keywords &lsquo;Multiple Detail Views&rsquo;. I found a sample by <a href="https://developer.apple.com/library/ios/samplecode/MultipleDetailViews/Introduction/Intro.html">Apple</a>, but it was last updated in 2012 and was done in Objective C and Xib/Nib files. I couldn&rsquo;t find anything done in <a href="http://www.apple.com/swift/">Swift</a>.</p>

<p>I spent a few days understanding Storyboards, Segues, new UISplitViewController in iOS8 and finally could do the job myself. I started with &lsquo;Master Detail Application&rsquo; template of Xcode 6. I selected &lsquo;Universal&rsquo; for Devices and &lsquo;Swift&rsquo; as Language while creating project. I got a Split View, Navigation Controller setup along with a single Table View and a Detail View. I made copies of Table View and Detail View to end up with 2 Table Views and 2 Detail Views, just like in the Apple sample.</p>

<p>Next we need to wire up the Segues. A simple solution to open different views from different rows of a Table View is to have &lsquo;Static Cells&rsquo; in table view, which allows you to setup rows using Storyboard itself and then you can control+drag from individual rows to different views and voila you have automatic segues to different views. Nothing more needs to be done. This approach is actually very simple and perfect for the scenario we are considering right now. We need first Table View to display menu options, which will probably be known in advance so can use static cells for that.</p>

<p>However in real-life scenarios we may need to open different views from different rows which may not be known in advance. So I decided to use segues with prototype cells and set row contents at runtime using <code>cellForRowAtIndexPath</code> method. Since we don&rsquo;t have access to individual rows in Storyboards while using prototype cells, we can not do automatic segues and we can&rsquo;t control+drag from individual rows. We control+drag from ViewController icon at the top instead. Also we must set up an identifier for the segue using Attributes Inspector, we will need that to trigger segue manually like this:</p>

<pre><code class="swift">override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        if indexPath.row == 0 {
            self.performSegueWithIdentifier("showTableView2", sender: self)
        } else if indexPath.row == 1 {
            self.performSegueWithIdentifier("showDetail1", sender: self)
        } else {
            self.performSegueWithIdentifier("showDetail2", sender: self)
        }
    }
</code></pre>

<p>And that&rsquo;s how we open different views from rows of a Table View. I did write a little more code to take care of Back Navigation button for Detail Views and to handle portrait to landscape transition correcly for iPhone 6+ (Yes it&rsquo;s a little different from iPad landscape transition). Also we used <strong>Show Detail</strong> segue instead of <strong>Push</strong>. Show Detail is an <strong>Adaptive segue</strong> introduced with iOS8 and it lets us use SplitView Controller for iPhone app as well and that&rsquo;s how we could do an universal app using a single storyboard, which runs well on both iPhones as well as iPads. You can get the complete code from <a href="https://github.com/palewar/Swift-Samples">Github</a>. I hope it will come handy while doing your new iOS8 project in Swift.</p>

<p>Happy Swifting :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Swift Code]]></title>
    <link href="http://swiftwala.com/my-first-swift-code"/>
    <updated>2014-10-07T12:00:18+05:30</updated>
    <id>http://swiftwala.com/my-first-swift-code</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/playground.png" width="150" height="150"> Ok so finally we see some real Swift code for the first time on this blog. Yay!! As I mentioned in my <a href="/they-pay-you-to-learn-swift">last post</a>, my solution <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> for the <a href="http://www.topcoder.com/?action=callback&amp;utm_source=palewar&amp;utm_campaign=ReferralProgram">Topcoder</a> $100 Playground challenge is given below. It helped me to get started with some Swift syntax and get a bit comfortable using playground feature of Swift. Don&rsquo;t worry about so many lines. Most of it is comments. Comments basically are instructions for participants on what needs to be done. Solution to the problem follows the comment.</p>

<!-- more -->


<p></p>

<p>I found myself referring <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_454">Apple&rsquo;s Swift Book</a> many times to get the concepts right for each of these problems. Getting the Generics right took sometime and I also referred good old <a href="http://stackoverflow.com">StackOverFlow</a> a few times, specially to get the random number generation right.</p>

<p>Everything should be self-explanatory, but let me know if you don&rsquo;t understand anything.</p>

<p><div><script src='https://gist.github.com/bf74ca669ebd5fde73ff.js?file=LearnSwiftTopcoder$100challenge.swift'></script>
<noscript><pre><code>// Playground - noun: a place where people can play

import UIKit
import Foundation


// Challenge 21 – Super-Duper Shopping Cart (Use Xcode6-Beta6)

/**
R1 – Create a constant array of string literals called “types” with these
values: book, CD, software
**/
// implement code for R1 below

let types = [&quot;book&quot;, &quot;CD&quot;, &quot;software&quot;]

/**

R2 – Create a “Customer” struct with a “name” and “email” property
**/
// implement code for R2 below

struct Customer {
    
    var name = &quot;&quot;
    var email = &quot;&quot;
    
}

/**

R3 – Create a “randomCustomer” function that returns a tuple. Add 3

Customer structs to a dictionary using the customer’s name as the key.
This function returns a randomly selected name and email of a Customer
from the dictionary. (Hint: you can use arc4random_uniform to
randomly select a value.)
**/
// implement code for R3 below

let customer1 = Customer(name: &quot;Sachin&quot;, email:&quot;sachin@somemail.com&quot;)
let customer2 = Customer(name: &quot;Vandana&quot;, email: &quot;vandana@somemail.com&quot;)
let customer3 = Customer(name: &quot;Gaurav&quot;, email: &quot;gaurav@somemail.com&quot;)

let dictionary = [customer1.name: customer1, customer2.name: customer2, customer3.name: customer3]

func randomCustomer() -&gt; (name: String, email: String){

    let array = [Customer](dictionary.values)
    let randomIndex = Int(arc4random_uniform(UInt32(array.count)))
    
    return (array[randomIndex].name, array[randomIndex].email)
    
}

/**

R4 – Create a “Product” class with the following properties:
1. id – Int
2. name – String
3. type – Constant, randomly selected value from “types” array
4. price – Double
5. discount – Double
6. saleStatus – String

Create an initializer that set’s the name, price and discount. The
discount should be set to 0 if discount is not passed. Set the
id to a random number between 1 and 10,000.

Create a getter for “saleStatus” that returns the String
“Sorry. This product is not on sale.” if dicsount is 0. Else
return the interpolated string “This product is on sale. It was
[display original price] but with a discount you only pay
[display sale price].”
**/
// implement code for R4 below

class Product {
    var id: Int
    var name: String
    var type = types[1]
    var price: Double
    var discount: Double
    var saleStatus: String {
        get {
            if discount == 0 {
                return &quot;Sorry. This product is not on sale.&quot;
             } else {
                return &quot;This product is on sale. It was \(price) but with a discount you only pay \(price -  price * discount).&quot;
            }
            
        }
    }
    
    init(){
        id = 1
        name = &quot;Beethoven&quot;
        price = 300
        discount = 0
        
    }
    
}


/**

R5 – Create an array called “products” with 5 product objects. Their names are
irrelevant but chose different prices. Set the discounts to 0, 0.1, 0.2, 0.3
and 0.4 respectively.

After adding the items to the array, iterate the collection and println the
“saleStatus” for each item.
**/
// implement code for R5 below

let product1 = Product(); let product2 = Product(); let product3 = Product(); let product4 = Product(); let product5 = Product()
product1.name = &quot;Beethoven&quot;; product1.price = 100; product1.discount = 0
product2.name = &quot;A R Rahman&#39;s Best&quot;; product2.price = 200; product2.discount = 0.1
product3.name = &quot;Madonna&#39;s Best&quot;; product3.price = 300; product3.discount = 0.2
product4.name = &quot;Beyonce&#39;s Best&quot;; product4.price = 400; product4.discount = 0.3
product5.name = &quot;Shakira&#39;s Best&quot;; product5.price = 500; product5.discount = 0.4

let products = [product1, product2, product3, product4, product5]

for product in products {
    println(product.saleStatus)
}


/**

R6 – Write a simple “Cart” class using Generics with the following properties:
1. customerName – String
2. customerEmail – String
3. items – any array of any type T
4. itemCount – Int, getter that returns the count of items in “items”.
5. promoCode – Optional String set to nil

Create an initializer that set the customerName and customerEmail.

Implement the following functions:

1. Create an “add” method that appends any type to the “items” array.
2. Create a “clear” method that removes all items from the “items” array.
3. Create a “remove” method that removes an item from the “items” array
based upon its position in the array.
4. Create a “getPromoCodeDisplay” method that returns the String “Your
promo code is [display promoCode].” if promoCode is not nil. Otherwise,
return the String “You do not have a promo code.”.
5. Create a “getCartStatus” method that returns the String “You have no
items in your cart.” if the number of items in the “items” array is 0.
Return the String “You have [display number of items] items in your
cart.” if the number of items in the “items” array is 1, 2 or 3.
For 4+ items in the “items” array, return the String “You are an
awesome customer!!”
**/
// implement code for R6 below

class Cart&lt;T&gt; {
    var customerName: String
    var customerEmail: String
    var items = [T]()
    var itemCount: Int {
        get {
            return items.count
        }
    }
    var promoCode: String?
    
    init(name: String, email: String){
        customerName = name
        customerEmail = email
        
    }
    
    func add(a: T) {
        items.append(a)
    }
    
    func clear() {
        items.removeAll(keepCapacity: false)
    }
    
    func remove(position: Int) {
        items.removeAtIndex(position-1)
    }
    
    func getPromoCodeDisplay() -&gt; String {
        if promoCode != nil {
            return &quot;Your promo code is \(promoCode!).&quot;
        } else {
            return &quot;You do not have a promo code.&quot;
        }
    }
    
    func getCartStatus() -&gt; String {
        if items.count == 0 {
            return &quot;You have no items in your cart.&quot;
        } else if items.count &lt; 4 {
            return &quot;You have \(items.count) items in your cart.&quot;
            
        } else {
            return &quot;You are an awesome customer!!&quot;
        }
        
    }
    
}


/**

R7 – Create a “customer” object by calling the “randomCustomer” function.
Create a new “cart” object for type Product with the newly created
“customer” object’s name and email. Printlnt customer’s name. Println the
itemCount (should be 0). Println the getCartStatus which should display
“You have no items in your cart.”
**/
// implement code for R7 below

var customer = randomCustomer()
var cart = Cart&lt;Product&gt;(name: customer.name, email: customer.email)
println(cart.customerName)
println(cart.itemCount)
println(cart.getCartStatus())

/**

R8 – iterate the “products” array and add all items from the “products”
array to the cart except for element 3. Println the itemCount (should be 4),
println getStatus() (should display “You are an awesome customer!!”). Assign
the customer a promo code. First, println getPromoCodeDisplay (should
display “You do not have a promo code.”), then set the promoCode to “1234″,
then println the getPromoCodeDisplay again (should display “Your promo code
is 1234.”).
**/
// implement code for R8 below

for (index, value) in enumerate(products) {
    if index+1 != 3 {
        cart.add(value)
    }
    
}

println(cart.itemCount)
println(cart.getCartStatus())
println(cart.getPromoCodeDisplay())
cart.promoCode = &quot;1234&quot;
println(cart.getPromoCodeDisplay())


/**
R9 – Remove the first item from the cart, then println the itemCount (should
be 3) and println the getCartStatus which should display “You have 3 items
in your cart.”
**/
// implement code for R9 below

cart.remove(1)
println(cart.itemCount)
println(cart.getCartStatus())</code></pre></noscript></div>
</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I am sharing my solution since the contest is already over. I have also reached out to Topcoder over Twitter and email for clarifications regarding any violations. I haven&rsquo;t heard back from them, but I don&rsquo;t intend to violate any terms &amp; conditions and if I will be made aware that it&rsquo;s not ok to share the code from contest entry like this, I am ready to remove it from here.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
