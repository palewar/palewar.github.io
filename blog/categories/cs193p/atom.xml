<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cs193p | Swift Wala]]></title>
  <link href="http://swiftwala.com/blog/categories/cs193p/atom.xml" rel="self"/>
  <link href="http://swiftwala.com/"/>
  <updated>2015-02-16T19:18:14+05:30</updated>
  <id>http://swiftwala.com/</id>
  <author>
    <name><![CDATA[Sachin Palewar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Calculator in Swift]]></title>
    <link href="http://swiftwala.com/calculator"/>
    <updated>2015-02-16T16:27:51+05:30</updated>
    <id>http://swiftwala.com/calculator</id>
    <content type="html"><![CDATA[<p><img src="/images/stanford-ios8.png"> All new <a href="https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099">CS193P</a> started at Stanford sometime back. Great news is, that it&rsquo;s being taught in Swift. I have just finished listening first 2 lectures. I am quite impressed with <strong>Paul Hegarty</strong>. He starts the lecture with firing Xcode, talking about it and then beginning to code a Calculator app in Swift. He explains concepts as and when needed while using them. Quite hands-on and practical approach I must say.</p>

<p>If you have some experience with programming and are well conversant with <a href="http://en.wikipedia.org/wiki/Object-oriented_programming">OOPS</a> concepts, then the course should be really easy to follow for you. It&rsquo;s a free course and available via iTunes, so I think anybody who is beginning with iOS development or Swift should really go through it.</p>

<p>Paul explains basics of <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html">autolayout</a> in Lecture 1 and explains constraints in Lecture 2. However what stands out in Lecture 2 (last 20 mins) is his explanation of <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a>, he does that like a rock-star and uses roads, arrows, radio transmission analogies to drive home his message.</p>

<p>There are reading assignments and programming assignments associated with lectures. I religiously read all the prescribed sections from the official <a href="https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">Apple book</a> and actually did learn a few new things which I missed when I went through the book earlier. A couple of them are:</p>

<blockquote><p>Swift’s remainder operator can also operate on floating-point numbers: 8 % 2.5   // equals 0.5</p></blockquote>

<p>and</p>

<blockquote><p>We should Use ++i and &ndash;i in all cases instead of i++/i&ndash;, for expected behavior of modifying i and returning the result.</p></blockquote>

<p>Then I moved onto Programming Assignment and started coding the calculator. However I was not really comfortable with the <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">RFP</a> Calculator, Paul demoed in the class, so I decided to instead code simple, standard calculator. Here is my code for it:</p>

<pre><code class="swift">class ViewController: UIViewController {

    @IBOutlet weak var displayLabel: UILabel!

    var isFirstDigit = true
    var operand1: Double = 0
    var operation = "="

    var displayValue: Double {
        get {
            //notice use of ! twice in below line. If you get that, then you have truely understood optionals :-)
            return NSNumberFormatter().numberFromString(displayLabel.text!)!.doubleValue
        }
        set {
            // Notice how we are using a Property Setter to perform additional tasks while 
            //setting value for the property
            displayLabel.text = "\(newValue)"
            isFirstDigit = true
            operation = "="

        }
    }

    //This single IBAction function is tied to all the digit buttons
    @IBAction func appendDigit(sender: UIButton) {

        let digit = sender.currentTitle!
        //Notice use of ternery operator in below line which results in a single line code
        //instead of usual if-else multiple lines
        displayLabel.text = isFirstDigit ? digit : displayLabel.text! + digit
        isFirstDigit = false
    }

    @IBAction func clearDisplay(sender: AnyObject) {
        displayValue = 0
           }

    @IBAction func saveOperand(sender: UIButton) {
        operation = sender.currentTitle!
        operand1 = displayValue
        isFirstDigit = true
    }

    @IBAction func calculate(sender: AnyObject) {
        switch operation {
        case "÷":displayValue = operand1 / displayValue
        case "×":displayValue *= operand1
        case "+":displayValue += operand1
        case "−":displayValue = operand1 - displayValue
        default:break
        }
    }


}
</code></pre>

<p>It&rsquo;s pretty simple code and I hope should be clear enough. Full project code is available at <a href="https://github.com/palewar/Swift-Samples">Github</a></p>

<p>Happy Learning :-)</p>
]]></content>
  </entry>
  
</feed>
