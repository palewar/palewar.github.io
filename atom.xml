<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Swift Wala]]></title>
  <link href="http://swiftwala.com/atom.xml" rel="self"/>
  <link href="http://swiftwala.com/"/>
  <updated>2014-11-22T18:40:58+05:30</updated>
  <id>http://swiftwala.com/</id>
  <author>
    <name><![CDATA[Sachin Palewar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CocoaPods Is Ready for Swift]]></title>
    <link href="http://swiftwala.com/cocoapods-is-ready-for-swift"/>
    <updated>2014-11-21T18:38:10+05:30</updated>
    <id>http://swiftwala.com/cocoapods-is-ready-for-swift</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://swiftwala.com/images/CocoaPods.png" width="100" height="100"> When we work on a real project, we use many third-party libraries to make our lives easier. To use these libs, we first need to find them, download them and include them in our project. <a href="http://cocoapods.org/">CocoaPods</a> lets us automate all this process and also handles dependency management for us. Check out this <a href="http://nshipster.com/cocoapods/">post on NSHipster</a> for a very good intro. <!-- more --></p>

<p>Using Cocoapods is really easy. You need to first install it by running <code>$ sudo gem install cocoapods</code> in Terminal. Then you need to create a Podfile in your project directory. A Podfile for including very popular <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> lib will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://github.com/CocoaPods/Specs.git&#39;</span>
</span><span class='line'><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;AFNetworking&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.4&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
And you are all set to use CocoaPods. You run <code>$ pod install</code> and you get an Xcode workspace file <code>.xcworkspace</code> created alongside your project file. From now on you need to always open and build project using workspace file instead of project file and you will be fine.</p>

<p>When Swift became available, iOS programmers wanted to use their much beloved CocoaPods to integrated with already existing ObjectiveC libraries and that was not really difficult, above steps work with Swift projects as well, you just need <a href="https://medium.com/@kirualex/cocoapods-with-swift-e6f8ba8f0afc">a couple more steps</a> and you are done.</p>

<p>However soon some new and shiny libraries written in Swift came on the scene. My favorites being <a href="http://nshipster.com/alamofire/">Alamofire</a> and <a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a>, but CocoaPods was not yet ready for Swift libs and people had to rely on using <a href="http://git-scm.com/book/en/Git-Tools-Submodules">alternative methods</a> to use these libs. However <a href="https://github.com/CocoaPods/CocoaPods/milestones/0.36.0">CocoaPods 0.36</a> is just around the corner and it will include support for Swift Pods.</p>

<p>While a public release is still some time away, you can use CocoaPods unreleased code to start integrating Swift libs in your projects right now. Just be cautious, that this is not fully tested code and treat it as a stopgap measure till 0.36 comes out. Ok so let&rsquo;s see what needs to be done:</p>

<ul>
<li>Create a file, called &lsquo;Gemfile&rsquo; in your project directory and just paste these lines in the file and save:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;cocoapods&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://github.com/CocoaPods/CocoaPods.git&#39;</span><span class="p">,</span> <span class="ss">:branch</span> <span class="o">=&gt;</span> <span class="s1">&#39;swift&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;cocoapods-core&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://github.com/CocoaPods/Core.git&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;xcodeproj&#39;</span><span class="p">,</span>  <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://github.com/CocoaPods/Xcodeproj.git&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>Run command <code>bundle install</code></li>
<li>Create a Podfile. If you want to use Alamofire and SwiftyJSON in your project, your Podfile<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> should look like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://github.com/CocoaPods/Specs.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;8.0&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;SwiftyJSON&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://github.com/orta/SwiftyJSON&quot;</span><span class="p">,</span> <span class="ss">:branch</span> <span class="o">=&gt;</span> <span class="s2">&quot;podspec&quot;</span>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;Alamofire&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://github.com/mrackwitz/Alamofire.git&quot;</span><span class="p">,</span> <span class="ss">:branch</span> <span class="o">=&gt;</span> <span class="s2">&quot;podspec&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>Run <code>bundle exec pod install</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> and you are done. You get the workspace file which you need to use from now on.</li>
</ul>


<p>Now you should be able to import Alamofire and SwiftyJSON in your project and use them.</p>

<p>Hope you liked this post. Connect via <a href="https://twitter.com/swiftwala">Twitter</a> &amp; <a href="https://feedburner.google.com/fb/a/mailverify?uri=SwiftWala&amp;amp;loc=en_US">email</a> for future updates. Thanks for reading.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Each lib should have a <a href="http://guides.cocoapods.org/making/specs-and-specs-repo.html">podspec</a> file to work with CocoaPods, since that&rsquo;s not the case right now, we are using forks of libs which contain a podspec file. This also means that if you want to use any other Swift lib with CocoaPods, you will need to fork it and create a podspec file for it yourself and then you will need to use path of your fork in the podfile.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>&lsquo;bundle exec&rsquo; ensures that you are using Swift CocoaPods version from your Gemfile. Thanks <a href="https://twitter.com/modocache">Brian</a> of <a href="https://github.com/Quick/Quick#how-to-install-quick-using-beta-cocoapods">Quick</a> for the tip.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functions = Closures]]></title>
    <link href="http://swiftwala.com/functions-equals-closures"/>
    <updated>2014-11-11T12:04:48+05:30</updated>
    <id>http://swiftwala.com/functions-equals-closures</id>
    <content type="html"><![CDATA[<p>Unlike my other posts <a href="http://swiftwala.com/blog/categories/equals/">equating</a> 2 concepts, I am actually completely right this time. As Functions in Swift are actually just <strong>Closures with a name</strong>. So what is a Closure? It&rsquo;s like a function, but without a name :-)</p>

<p>Here is a simple Function:<!-- more --></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">isFirstStringGreater</span><span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Which can be written as Closure like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span> <span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
So basically we write Closure inside the curly braces, omit the <code>func</code> keyword and a name and instead of wrapping body within braces, we mark the beginning of body by  <code>in</code> keyword.</p>

<p>Above closure can be further shortened to <code>{ s1, s2 in s1 &gt; s2 }</code> and even to just <code>&gt;</code> if closure is being passed as an argument to a function. How all these shortening works has been explained really well in <a href="https://developer.apple.com/library/mac/documentation/swift/conceptual/swift_programming_language/Closures.html">Apple Docs</a>. You will find details about concepts like <strong>&lsquo;Trailing Closure&rsquo;</strong> and <strong>&lsquo;Capturing&rsquo;</strong> explained in the documentation as well.</p>

<p>Now let&rsquo;s talk about Functions. We have already seen what a function looks like in Swift above, however if you have used Objective C, you may miss the named parameters while calling a function. Well don&rsquo;t worry functions in swift are quite flexible and powerful. Here are some points to remember regarding function parameters in Swift:</p>

<ul>
<li>We can prefix <code>#</code> to Parameter names to get expressive parameter names like Objective-C.</li>
<li>For parameters with default values Swift automatically uses their names as external names without prefixing <code>#</code>.</li>
<li>Parameter are constant by default, to make them variable prefix parameter name with <code>var</code>.</li>
</ul>


<p>Again Apple has explained Functions quite well in it&rsquo;s <a href="https://developer.apple.com/library/mac/documentation/swift/conceptual/swift_programming_language/Functions.html">documentation</a> so do check it out for detailed understanding. You may like to pay special attention to understand <strong>In-out</strong> and <strong>Variadic</strong> parameters.</p>

<p>Something which is really different and powerful regarding Swift Functions is that you can treat them as regular objects or types. You can assign them to vars and constants, pass them as parameters to other functions and even return a function from a function. Swift has taken these ideas from <strong>&lsquo;Functional Programming&rsquo;</strong> languages. Although <a href="http://robnapier.net/swift-is-not-functional">Swift is not completely functional</a>, it lets you use several Functional Programming concepts. To better understand Functional Programming with Swift you can check out this <a href="http://www.raywenderlich.com/82599/swift-functional-programming-tutorial">Ray Wenderlich Tutorial</a> and consider buying <a href="http://www.objc.io/books/">this book</a>.</p>

<p>If you like my posts, please <a href="https://twitter.com/swiftwala">follow</a> me. You can also <a href="https://feedburner.google.com/fb/a/mailverify?uri=SwiftWala&amp;amp;loc=en_US">subscribe via email</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UISplitViewController=UINavigationController]]></title>
    <link href="http://swiftwala.com/uisplitviewcontroller-equals-uinavigationcontroller"/>
    <updated>2014-11-04T12:02:40+05:30</updated>
    <id>http://swiftwala.com/uisplitviewcontroller-equals-uinavigationcontroller</id>
    <content type="html"><![CDATA[<p>You read it right. If you are using iOS8, UISplitViewController indeed behaves as if it&rsquo;s a UINavigationController on iPhone. Obviously it means that <strong>UISplitViewController is now supported for iPhones as well</strong>. This is a small but important part of the bigger picture of Universal Storyboards and Adaptive UI starting from iOS8. <!-- more --> Now it&rsquo;s possible for us to have a single <strong>Universal Storyboard which supports all types of iPhones and iPads</strong>.</p>

<p>You will also notice that in XCode6 there is now a new Master-Detail Application template. If you select a Universal Project option with it, you get a Storyboard with UISplitViewController and you can run it against both iPhone as well as iPad simulators. You use <strong>new Adaptive segues, &lsquo;Show&rsquo; for Master View and &lsquo;Show Detail&rsquo; for Detail View instead of &lsquo;Push&rsquo;</strong> which is now deprecated. &lsquo;Show&rsquo; is similar to &lsquo;Push&rsquo;. When running on iPad &lsquo;Show Detail&rsquo; ensures that Detail View is displayed on right side of Split, but when running on an iPhone &lsquo;Show Detail&rsquo; automatically starts behaving as &lsquo;Show&rsquo; and Detail View is displayed as the single view on top. Very creative approach isn&rsquo;t it?</p>

<p>For the sake of simplicity I have generalized a bit. Once you understand the concepts though, you need to know that above behavior is not really fixed and you can have a split view on an iPhone if you want. Not to forget iPhone 6+ by default supports Split View in landscape mode. To support Split View on smaller iPhone you can modify <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITraitSet_ClassReference/index.html">Trait Collection</a>. Also at times you may want to not display detail view on iPhones and instead directly show master view. If detail is empty, it doesn&rsquo;t make sense to display a blank view as the only view at the top. You can control which view appears as the top view on iPhone when using Universal Storyboard using new methods in <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISplitViewControllerDelegate_protocol/index.html">Delegate</a></p>

<p>For a really simple introduction to new UISplitViewController you may read this <a href="http://nshipster.com/uisplitviewcontroller/">post by Natasha Murashev</a> and then come back and check out my <a href="http://swiftwala.com/multiple-detail-views">Multiple Detail Views Sample</a> to see the Split View in action. I also suggest you to check out <a href="http://www.jessesquires.com/adaptive-user-interfaces/">Adaptive UI by Jesse Squires</a> where he explains &lsquo;Size-Classes&rsquo; in a very simple manner and suggests the way forward for iOS Developers and designers.</p>

<p>Let&rsquo;s be Adaptive :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Detail Views in iOS8]]></title>
    <link href="http://swiftwala.com/multiple-detail-views"/>
    <updated>2014-10-21T17:17:28+05:30</updated>
    <id>http://swiftwala.com/multiple-detail-views</id>
    <content type="html"><![CDATA[<p>A few days back I was trying to create a simple iOS app to compete in one of the contest at <a href="http://www.topcoder.com/?action=callback&amp;utm_source=palewar&amp;utm_campaign=ReferralProgram">Topcoder</a>. I needed a Table View to show initial menu, then one of the menus had submenus so needed second Table View to show that. I needed a couple of Detail Views which should open when clicked on any of the menu items. <!-- more --> I hadn&rsquo;t programed for a few years now, so I was not familiar with Storyboards as Nibs were the norm a few years back. I was also learning Swift, so I couldn&rsquo;t really finish the app before the deadline.</p>

<p>However while trying to work on the app, I often googled for samples with different combinations of keywords &lsquo;Multiple Detail Views&rsquo;. I found a sample by <a href="https://developer.apple.com/library/ios/samplecode/MultipleDetailViews/Introduction/Intro.html">Apple</a>, but it was last updated in 2012 and was done in Objective C and Xib/Nib files. I couldn&rsquo;t find anything done in <a href="http://www.apple.com/swift/">Swift</a>.</p>

<p>I spent a few days understanding Storyboards, Segues, new UISplitViewController in iOS8 and finally could do the job myself. I started with &lsquo;Master Detail Application&rsquo; template of Xcode 6. I selected &lsquo;Universal&rsquo; for Devices and &lsquo;Swift&rsquo; as Language while creating project. I got a Split View, Navigation Controller setup along with a single Table View and a Detail View. I made copies of Table View and Detail View to end up with 2 Table Views and 2 Detail Views, just like in the Apple sample.</p>

<p>Next we need to wire up the Segues. A simple solution to open different views from different rows of a Table View is to have &lsquo;Static Cells&rsquo; in table view, which allows you to setup rows using Storyboard itself and then you can control+drag from individual rows to different views and voila you have automatic segues to different views. Nothing more needs to be done. This approach is actually very simple and perfect for the scenario we are considering right now. We need first Table View to display menu options, which will probably be known in advance so can use static cells for that.</p>

<p>However in real-life scenarios we may need to open different views from different rows which may not be known in advance. So I decided to use segues with prototype cells and set row contents at runtime using <code>cellForRowAtIndexPath</code> method. Since we don&rsquo;t have access to individual rows in Storyboards while using prototype cells, we can not do automatic segues and we can&rsquo;t control+drag from individual rows. We control+drag from ViewController icon at the top instead. Also we must set up an identifier for the segue using Attributes Inspector, we will need that to trigger segue manually like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">performSegueWithIdentifier</span><span class="p">(</span><span class="s">&quot;showTableView2&quot;</span><span class="p">,</span> <span class="nl">sender</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">performSegueWithIdentifier</span><span class="p">(</span><span class="s">&quot;showDetail1&quot;</span><span class="p">,</span> <span class="nl">sender</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">performSegueWithIdentifier</span><span class="p">(</span><span class="s">&quot;showDetail2&quot;</span><span class="p">,</span> <span class="nl">sender</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>And that&rsquo;s how we open different views from rows of a Table View. I did write a little more code to take care of Back Navigation button for Detail Views and to handle portrait to landscape transition correcly for iPhone 6+ (Yes it&rsquo;s a little different from iPad landscape transition). Also we used <strong>Show Detail</strong> segue instead of <strong>Push</strong>. Show Detail is an <strong>Adaptive segue</strong> introduced with iOS8 and it lets us use SplitView Controller for iPhone app as well and that&rsquo;s how we could do an universal app using a single storyboard, which runs well on both iPhones as well as iPads. You can get the complete code from <a href="https://github.com/palewar/Swift-Samples">Github</a>. I hope it will come handy while doing your new iOS8 project in Swift.</p>

<p>Happy Swifting :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enum=Struct=Class]]></title>
    <link href="http://swiftwala.com/enum-equals-struct-equals-class"/>
    <updated>2014-10-10T16:07:43+05:30</updated>
    <id>http://swiftwala.com/enum-equals-struct-equals-class</id>
    <content type="html"><![CDATA[<p>I have used enums, structs and classes in other languages before, but never thought that I will ever be comparing them,<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> as they always seemed to be completely different programming concepts in other languages. Well Swift is different, it has supercharged enums and structs so much so that it may seem overwhelming and outright confusing.</p>

<p>Ok, brace yourself. Here it comes - <strong>Both enums and structs can have properties and methods like classes.</strong> <!-- more -->What?? That was exactly my reaction. This new concept was so alien to me that my head started spinning and I gave up on reading and understanding these concepts in detail in the <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_135">Swift Book</a>. So a few days passed and I was just checking out how many <a href="https://github.com/trending?l=swift&amp;since=monthly">Swift Repos</a> are there on Github, and I came across <a href="https://github.com/dankogai/swift-json">swift-json</a> by <a href="http://en.wikipedia.org/wiki/Dan_Kogai">Dan Kogai</a>. While <a href="https://github.com/dankogai/swift-json/wiki/Discussion">explaining</a> his approach, Dan drops some pearls of wisdom:</p>

<blockquote><p>Some thing must be copied by value and that&rsquo;s what struct is for. In swifts primitives are struct that happens to fit in the register. So is enum, which is really a union in disguise. And as with C and friends enums are also copied by value.</p></blockquote>

<p>I read and re-read these 2 lines again and again so that I can really make complete sense of these lines. So the key takeaway from this post should be that <strong>enums and structs are value types, whereas classes are reference types</strong>. This key difference gives us the reason to use Structs and Classes in different scenarios.</p>

<p>Others have already done a good job with explaining these different scenarios, so instead of writing a lengthy post myself, I would just point you to an <a href="http://www.objc.io/issue-16/swift-classes-vs-structs.html">excellent blog post</a> on this same topic. Go through that post and you will feel becoming a little more wiser than before. Also last but not the least, <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_135">Swift Book</a> actually explains these concepts quite clearly and in detail, so you should definitely read it to gain an indepth understanding of these concepts.</p>

<p>My intention was just to really smoothen-up the road ahead :-)</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I am sorry for a misleading title for this post, but couldn&rsquo;t think of anything better. This post is about similarities and differences between Enumeration, Structure and Class and yes before you point out, I know that I should have used &lsquo;==&rsquo; instead of &lsquo;=&rsquo;, but hey title doesn&rsquo;t have to be syntactically correct, right?<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Swift Code]]></title>
    <link href="http://swiftwala.com/my-first-swift-code"/>
    <updated>2014-10-07T12:00:18+05:30</updated>
    <id>http://swiftwala.com/my-first-swift-code</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://swiftwala.com/images/playground.png" width="150" height="150"> Ok so finally we see some real Swift code for the first time on this blog. Yay!! As I mentioned in my <a href="http://swiftwala.com/they-pay-you-to-learn-swift">last post</a>, my solution <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> for the <a href="http://www.topcoder.com/?action=callback&amp;utm_source=palewar&amp;utm_campaign=ReferralProgram">Topcoder</a> $100 Playground challenge is given below. It helped me to get started with some Swift syntax and get a bit comfortable using playground feature of Swift. Don&rsquo;t worry about so many lines. Most of it is comments. Comments basically are instructions for participants on what needs to be done. Solution to the problem follows the comment.</p>

<!-- more -->


<p></p>

<p>I found myself referring <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_454">Apple&rsquo;s Swift Book</a> many times to get the concepts right for each of these problems. Getting the Generics right took sometime and I also referred good old <a href="http://stackoverflow.com">StackOverFlow</a> a few times, specially to get the random number generation right.</p>

<p>Everything should be self-explanatory, but let me know if you don&rsquo;t understand anything.</p>

<div><script src='https://gist.github.com/bf74ca669ebd5fde73ff.js?file=LearnSwiftTopcoder$100challenge.swift'></script>
<noscript><pre><code>// Playground - noun: a place where people can play

import UIKit
import Foundation


// Challenge 21 – Super-Duper Shopping Cart (Use Xcode6-Beta6)

/**
R1 – Create a constant array of string literals called “types” with these
values: book, CD, software
**/
// implement code for R1 below

let types = [&quot;book&quot;, &quot;CD&quot;, &quot;software&quot;]

/**

R2 – Create a “Customer” struct with a “name” and “email” property
**/
// implement code for R2 below

struct Customer {
    
    var name = &quot;&quot;
    var email = &quot;&quot;
    
}

/**

R3 – Create a “randomCustomer” function that returns a tuple. Add 3

Customer structs to a dictionary using the customer’s name as the key.
This function returns a randomly selected name and email of a Customer
from the dictionary. (Hint: you can use arc4random_uniform to
randomly select a value.)
**/
// implement code for R3 below

let customer1 = Customer(name: &quot;Sachin&quot;, email:&quot;sachin@somemail.com&quot;)
let customer2 = Customer(name: &quot;Vandana&quot;, email: &quot;vandana@somemail.com&quot;)
let customer3 = Customer(name: &quot;Gaurav&quot;, email: &quot;gaurav@somemail.com&quot;)

let dictionary = [customer1.name: customer1, customer2.name: customer2, customer3.name: customer3]

func randomCustomer() -&gt; (name: String, email: String){

    let array = [Customer](dictionary.values)
    let randomIndex = Int(arc4random_uniform(UInt32(array.count)))
    
    return (array[randomIndex].name, array[randomIndex].email)
    
}

/**

R4 – Create a “Product” class with the following properties:
1. id – Int
2. name – String
3. type – Constant, randomly selected value from “types” array
4. price – Double
5. discount – Double
6. saleStatus – String

Create an initializer that set’s the name, price and discount. The
discount should be set to 0 if discount is not passed. Set the
id to a random number between 1 and 10,000.

Create a getter for “saleStatus” that returns the String
“Sorry. This product is not on sale.” if dicsount is 0. Else
return the interpolated string “This product is on sale. It was
[display original price] but with a discount you only pay
[display sale price].”
**/
// implement code for R4 below

class Product {
    var id: Int
    var name: String
    var type = types[1]
    var price: Double
    var discount: Double
    var saleStatus: String {
        get {
            if discount == 0 {
                return &quot;Sorry. This product is not on sale.&quot;
             } else {
                return &quot;This product is on sale. It was \(price) but with a discount you only pay \(price -  price * discount).&quot;
            }
            
        }
    }
    
    init(){
        id = 1
        name = &quot;Beethoven&quot;
        price = 300
        discount = 0
        
    }
    
}


/**

R5 – Create an array called “products” with 5 product objects. Their names are
irrelevant but chose different prices. Set the discounts to 0, 0.1, 0.2, 0.3
and 0.4 respectively.

After adding the items to the array, iterate the collection and println the
“saleStatus” for each item.
**/
// implement code for R5 below

let product1 = Product(); let product2 = Product(); let product3 = Product(); let product4 = Product(); let product5 = Product()
product1.name = &quot;Beethoven&quot;; product1.price = 100; product1.discount = 0
product2.name = &quot;A R Rahman&#39;s Best&quot;; product2.price = 200; product2.discount = 0.1
product3.name = &quot;Madonna&#39;s Best&quot;; product3.price = 300; product3.discount = 0.2
product4.name = &quot;Beyonce&#39;s Best&quot;; product4.price = 400; product4.discount = 0.3
product5.name = &quot;Shakira&#39;s Best&quot;; product5.price = 500; product5.discount = 0.4

let products = [product1, product2, product3, product4, product5]

for product in products {
    println(product.saleStatus)
}


/**

R6 – Write a simple “Cart” class using Generics with the following properties:
1. customerName – String
2. customerEmail – String
3. items – any array of any type T
4. itemCount – Int, getter that returns the count of items in “items”.
5. promoCode – Optional String set to nil

Create an initializer that set the customerName and customerEmail.

Implement the following functions:

1. Create an “add” method that appends any type to the “items” array.
2. Create a “clear” method that removes all items from the “items” array.
3. Create a “remove” method that removes an item from the “items” array
based upon its position in the array.
4. Create a “getPromoCodeDisplay” method that returns the String “Your
promo code is [display promoCode].” if promoCode is not nil. Otherwise,
return the String “You do not have a promo code.”.
5. Create a “getCartStatus” method that returns the String “You have no
items in your cart.” if the number of items in the “items” array is 0.
Return the String “You have [display number of items] items in your
cart.” if the number of items in the “items” array is 1, 2 or 3.
For 4+ items in the “items” array, return the String “You are an
awesome customer!!”
**/
// implement code for R6 below

class Cart&lt;T&gt; {
    var customerName: String
    var customerEmail: String
    var items = [T]()
    var itemCount: Int {
        get {
            return items.count
        }
    }
    var promoCode: String?
    
    init(name: String, email: String){
        customerName = name
        customerEmail = email
        
    }
    
    func add(a: T) {
        items.append(a)
    }
    
    func clear() {
        items.removeAll(keepCapacity: false)
    }
    
    func remove(position: Int) {
        items.removeAtIndex(position-1)
    }
    
    func getPromoCodeDisplay() -&gt; String {
        if promoCode != nil {
            return &quot;Your promo code is \(promoCode!).&quot;
        } else {
            return &quot;You do not have a promo code.&quot;
        }
    }
    
    func getCartStatus() -&gt; String {
        if items.count == 0 {
            return &quot;You have no items in your cart.&quot;
        } else if items.count &lt; 4 {
            return &quot;You have \(items.count) items in your cart.&quot;
            
        } else {
            return &quot;You are an awesome customer!!&quot;
        }
        
    }
    
}


/**

R7 – Create a “customer” object by calling the “randomCustomer” function.
Create a new “cart” object for type Product with the newly created
“customer” object’s name and email. Printlnt customer’s name. Println the
itemCount (should be 0). Println the getCartStatus which should display
“You have no items in your cart.”
**/
// implement code for R7 below

var customer = randomCustomer()
var cart = Cart&lt;Product&gt;(name: customer.name, email: customer.email)
println(cart.customerName)
println(cart.itemCount)
println(cart.getCartStatus())

/**

R8 – iterate the “products” array and add all items from the “products”
array to the cart except for element 3. Println the itemCount (should be 4),
println getStatus() (should display “You are an awesome customer!!”). Assign
the customer a promo code. First, println getPromoCodeDisplay (should
display “You do not have a promo code.”), then set the promoCode to “1234″,
then println the getPromoCodeDisplay again (should display “Your promo code
is 1234.”).
**/
// implement code for R8 below

for (index, value) in enumerate(products) {
    if index+1 != 3 {
        cart.add(value)
    }
    
}

println(cart.itemCount)
println(cart.getCartStatus())
println(cart.getPromoCodeDisplay())
cart.promoCode = &quot;1234&quot;
println(cart.getPromoCodeDisplay())


/**
R9 – Remove the first item from the cart, then println the itemCount (should
be 3) and println the getCartStatus which should display “You have 3 items
in your cart.”
**/
// implement code for R9 below

cart.remove(1)
println(cart.itemCount)
println(cart.getCartStatus())</code></pre></noscript></div>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I am sharing my solution since the contest is already over. I have also reached out to Topcoder over Twitter and email for clarifications regarding any violations. I haven&rsquo;t heard back from them, but I don&rsquo;t intend to violate any terms &amp; conditions and if I will be made aware that it&rsquo;s not ok to share the code from contest entry like this, I am ready to remove it from here.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[They Pay You to Learn Swift]]></title>
    <link href="http://swiftwala.com/they-pay-you-to-learn-swift"/>
    <updated>2014-10-06T12:47:07+05:30</updated>
    <id>http://swiftwala.com/they-pay-you-to-learn-swift</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://swiftwala.com/images/topcoderswift.png"> So as I mentioned in my <a href="http://swiftwala.com/hello-swift">last post</a> I was trying to find something to do in Swift. I thought, maybe I should work on some simple, dummy apps to hone my skills. I was considering a few ideas, but then I got a mail from <a href="http://www.topcoder.com/?action=callback&amp;utm_source=palewar&amp;utm_campaign=ReferralProgram">Topcoder</a> announcing their <a href="http://swift.topcoder.com/?action=callback&amp;utm_source=palewar&amp;utm_campaign=ReferralProgram">GetSwifter</a> series. It basically is a series of development challenges in Swift. They have decided to distribute $500,000 as prizes. <!-- more --> I checked out their Swift Challenges and found that they were mostly some simple apps. They keep posting a few challenges every week and typical time to complete the challenges is about 4-6 days. I found this very interesting and started working on a few challenges.</p>

<p>They just finished distributing $100,000 to 1000 people. It was a very simple challenge to get started. They just wanted participants to create a playground file and intention was to test that we have understood basics in Swift and can write and use Classes, Structures, Arrays, Tuples etc. I participated in this challenge and was successful in earning my first prize at Topcoder. They basically gave $100 to first 1000 people who completed the challenge successfully.</p>

<p>While this simple challenge is already over, not so simple and some real-world challenges are in progress and more challenges are being added regularly so I urge all of you to checkout <a href="http://swift.topcoder.com/?action=callback&amp;utm_source=palewar&amp;utm_campaign=ReferralProgram">Swift Challenges</a> on <a href="http://www.topcoder.com/?action=callback&amp;utm_source=palewar&amp;utm_campaign=ReferralProgram">Topcoder</a> right now and start participating. It&rsquo;s really a good way to learn Swift and in these crazy times, you get paid to learn it, so make the most of it.</p>

<p>For those interested in the code for $100 Playground challenge, I am going to share it in my next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Swift]]></title>
    <link href="http://swiftwala.com/hello-swift"/>
    <updated>2014-10-02T11:39:17+05:30</updated>
    <id>http://swiftwala.com/hello-swift</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://swiftwala.com/images/Apple_Swift_Logo.png" width="100" height="100"> I was thinking about learning <a href="https://developer.apple.com/swift/">Swift</a> someday, but what really made me take the plunge was <a href="http://www.wired.com/2014/07/apple-swift/" title="Why Apple’s Swift Language Will Instantly Remake Computer Programming">this article on Wired</a>. This article has one of the best opening I have read, it goes something like this:</p>

<blockquote><p>Chris Lattner spent a year and a half creating a new programming language — a new way of designing, building, and running computer software — and he didn&rsquo;t mention it to anyone, not even his closest friends and colleagues. <!-- more --> He started in the summer of 2010, working at night and on weekends, and by the end of the following year, he’d mapped out the basics of the new language. That’s when he revealed his secret to the top executives at his company, and they were impressed enough to put a few other seasoned engineers on the project. Then, after another eighteen months, it became a “major focus” for the company, with a huge team of developers working alongside Lattner, and that meant the new language would soon change the world of computing. Lattner, you see, works for Apple.</p></blockquote>

<p>You can continue reading at <a href="http://www.wired.com/2014/07/apple-swift/">Wired</a>. After reading this article I spent most of my day stalking <a href="http://www.nondot.org/sabre/">Chris</a> online :-)</p>

<p>OK so I started investing some time and <a href="https://www.kickstarter.com/projects/908213631/complete-ios8-developer-course-using-swift" title="Complete iOS 8 Developer Course Using Swift">money</a> into it. I began by watching some really great <a href="https://developer.apple.com/videos/wwdc/2014/">WWDC Videos by Apple</a>. Those videos were really helpful in getting me started quickly. I watched following videos to get upto speed quickly:</p>

<ul>
<li>Introduction to Swift</li>
<li>What&rsquo;s New in Cocoa Touch</li>
<li>What&rsquo;s New in Xcode 6</li>
<li>Storyboards and Controllers on OS X</li>
</ul>


<p>These videos should be sufficient to get started, if you have done even a little bit of iOS programming sometime in your life. Rest of the videos you can consume, as and when time permits or need arises. Next I headed to <a href="https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11">Apple&rsquo;s official book on Swift</a>. Do checkout the &lsquo;<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-XID_0">About Swift</a>&rsquo; section to better understand the philosophy behind this new language. Some pearls of wisdom from there are:</p>

<ul>
<li>Swift is not compatible with C unlike Objective C. It frees itself from constraints of C by doing this.</li>
<li>Swift is friendly to new programmers.</li>
<li>It supports playgrounds, which is really a much improved REPL</li>
<li>Swift combines the best in modern language thinking. Many features inspired from Javascript, C#, Ruby etc.</li>
</ul>


<p>Next is the very useful &lsquo;<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1">Swift Tour</a>&rsquo; section in the book which introduces you to the basics in a 30 mins read. If you have done all these things, you should be ready to do some programming in Swift. Fire-up the X-Code 6 and create a Playground project and start playing. If you don&rsquo;t have a Mac or Xcode installed yet, don&rsquo;t worry, you can write <a href="http://www.swiftstub.com/">Swift code in Browser</a> without installing anything at all, thanks to <a href="https://skipcasts.com/">Skip Wilson</a></p>

<p>OK so I did all that and was feeling pretty happy with my progress so far and was all pumped up to really dive-into this new language and become an expert, but I didn&rsquo;t know what to do next so really kind of got stuck for a few days, trying to figure out what should be my next step in learning Swift. Watching WWDC Videos one after the other or just reading a book didn&rsquo;t really look interesting to me. I needed something to do, that&rsquo;s the best way to learn I think. What did I do? Please wait for my next post to find out.</p>
]]></content>
  </entry>
  
</feed>
